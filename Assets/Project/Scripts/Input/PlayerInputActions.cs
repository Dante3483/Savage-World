//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Project/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""5963d34a-d515-4118-b82f-c6cf6716f7c5"",
            ""actions"": [
                {
                    ""name"": ""Open/Close Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""655077d9-9f6f-4fb6-ae32-9ee71b36830f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open/Close CraftStation"",
                    ""type"": ""Button"",
                    ""id"": ""f7784f0c-d9e2-4d52-aa57-657ebc0d9b02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open/Close Debug"",
                    ""type"": ""Button"",
                    ""id"": ""cd756934-79c3-4343-a819-041ee4c4c4e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open/Close Furnace"",
                    ""type"": ""Button"",
                    ""id"": ""8aafca71-42ca-44b0-9828-8b9d5205687d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open/Close Research"",
                    ""type"": ""Button"",
                    ""id"": ""8479ec89-3fb0-4610-ba83-8d9415990cca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Cell By Keyboard"",
                    ""type"": ""Button"",
                    ""id"": ""88092ce9-b97c-44dc-9ce6-d3be75fe0604"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Hotbar Cell By Scrolling"",
                    ""type"": ""Value"",
                    ""id"": ""ce7401d4-eb31-4187-a033-01e0275f147a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""800385ea-f5e5-488f-8e75-549599faee90"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""760f1a87-b54d-49ad-a1ab-0d5b58e7c30f"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea847178-20be-4141-9159-3297d67b68ae"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close CraftStation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2a5717e-b464-4c41-adda-78eea965faca"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Furnace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19b4b0e5-9762-4430-a382-e9336808f27a"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Research"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9de772e-1a44-4f2c-8a6c-af028476f14a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0)"",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Cell By Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e3c37c6-ab44-41a4-8620-8c56469d9c90"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Cell By Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb9a458c-b894-4a60-8588-9d629b2dfe8c"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Cell By Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16457e48-ebd4-44a2-ac46-30f0453a9ec7"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Cell By Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4da9e2d1-4dca-4ae5-888b-f5984d070426"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=4)"",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Cell By Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c14039c-6eea-4a59-9013-4121a89ab44d"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""Select Hotbar Cell By Scrolling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interactions"",
            ""id"": ""02ba9d30-a702-4a0b-acb7-88baa49680ec"",
            ""actions"": [
                {
                    ""name"": ""Use Item From Hotbar"",
                    ""type"": ""Button"",
                    ""id"": ""e90f1239-e3c7-4e33-9d67-9857fa39ddd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break Block"",
                    ""type"": ""Button"",
                    ""id"": ""62773ad5-67bd-4d50-98b3-82b0406a70ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw Item"",
                    ""type"": ""Button"",
                    ""id"": ""ec27bea1-8313-49b3-9ff2-49582fcb7655"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e154d9b-5992-4f1c-ad61-1ed2c69d4ac5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use Item From Hotbar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfe3df8f-d4e4-43e3-bac1-82cea1586598"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2b67a00-43e2-490c-ac0c-aabdad7ff7b2"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""b1467f1f-2938-4567-ada8-05bb85a92db1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c5ff6c31-0939-4108-bd88-f30e291057ad"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c6950a64-47c8-4a25-a89b-ab7463ba0cca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""3c140f77-f5e6-4d8a-9f78-b1f4480c7dc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""6c971866-4db3-4c69-8ea5-62266db557b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""1b0df3e3-0645-4193-a226-1cb0bf24dbb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bafb6fa6-4845-426d-b2f9-95250004b08e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d11d6c37-1dae-47ee-9790-0d024e1fe77a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94277dad-d1f5-4e9a-a3f7-26bef0277e09"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbf1d959-31a5-4d73-ad47-0ebf3e84875b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""144955ed-1d8c-46a8-a300-c2d1313e6b77"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""06358e14-ed3a-4fde-b1b7-f9a35b39eb36"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f222ac05-1a22-4373-a73b-6374c67aeb3e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""3af39e40-6a15-44c1-8c29-320d01d8c693"",
            ""actions"": [
                {
                    ""name"": ""Toggle Developer Console"",
                    ""type"": ""Button"",
                    ""id"": ""21e0c46b-02bc-43bc-a94e-010b02827ba1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63d9c554-a154-42f2-a140-4088e86e7857"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": """",
                    ""action"": ""Toggle Developer Console"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77290bd4-5d68-4420-a1ec-e4b3aa760f3f"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""Toggle Developer Console"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_OpenCloseInventory = m_UI.FindAction("Open/Close Inventory", throwIfNotFound: true);
        m_UI_OpenCloseCraftStation = m_UI.FindAction("Open/Close CraftStation", throwIfNotFound: true);
        m_UI_OpenCloseDebug = m_UI.FindAction("Open/Close Debug", throwIfNotFound: true);
        m_UI_OpenCloseFurnace = m_UI.FindAction("Open/Close Furnace", throwIfNotFound: true);
        m_UI_OpenCloseResearch = m_UI.FindAction("Open/Close Research", throwIfNotFound: true);
        m_UI_SelectHotbarCellByKeyboard = m_UI.FindAction("Select Hotbar Cell By Keyboard", throwIfNotFound: true);
        m_UI_SelectHotbarCellByScrolling = m_UI.FindAction("Select Hotbar Cell By Scrolling", throwIfNotFound: true);
        // Interactions
        m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
        m_Interactions_UseItemFromHotbar = m_Interactions.FindAction("Use Item From Hotbar", throwIfNotFound: true);
        m_Interactions_BreakBlock = m_Interactions.FindAction("Break Block", throwIfNotFound: true);
        m_Interactions_ThrowItem = m_Interactions.FindAction("Throw Item", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
        m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Player_Slide = m_Player.FindAction("Slide", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_ToggleDeveloperConsole = m_Debug.FindAction("Toggle Developer Console", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, PlayerInputActions.UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Interactions.enabled, "This will cause a leak and performance issues, PlayerInputActions.Interactions.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInputActions.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Debug.enabled, "This will cause a leak and performance issues, PlayerInputActions.Debug.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_OpenCloseInventory;
    private readonly InputAction m_UI_OpenCloseCraftStation;
    private readonly InputAction m_UI_OpenCloseDebug;
    private readonly InputAction m_UI_OpenCloseFurnace;
    private readonly InputAction m_UI_OpenCloseResearch;
    private readonly InputAction m_UI_SelectHotbarCellByKeyboard;
    private readonly InputAction m_UI_SelectHotbarCellByScrolling;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenCloseInventory => m_Wrapper.m_UI_OpenCloseInventory;
        public InputAction @OpenCloseCraftStation => m_Wrapper.m_UI_OpenCloseCraftStation;
        public InputAction @OpenCloseDebug => m_Wrapper.m_UI_OpenCloseDebug;
        public InputAction @OpenCloseFurnace => m_Wrapper.m_UI_OpenCloseFurnace;
        public InputAction @OpenCloseResearch => m_Wrapper.m_UI_OpenCloseResearch;
        public InputAction @SelectHotbarCellByKeyboard => m_Wrapper.m_UI_SelectHotbarCellByKeyboard;
        public InputAction @SelectHotbarCellByScrolling => m_Wrapper.m_UI_SelectHotbarCellByScrolling;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @OpenCloseInventory.started += instance.OnOpenCloseInventory;
            @OpenCloseInventory.performed += instance.OnOpenCloseInventory;
            @OpenCloseInventory.canceled += instance.OnOpenCloseInventory;
            @OpenCloseCraftStation.started += instance.OnOpenCloseCraftStation;
            @OpenCloseCraftStation.performed += instance.OnOpenCloseCraftStation;
            @OpenCloseCraftStation.canceled += instance.OnOpenCloseCraftStation;
            @OpenCloseDebug.started += instance.OnOpenCloseDebug;
            @OpenCloseDebug.performed += instance.OnOpenCloseDebug;
            @OpenCloseDebug.canceled += instance.OnOpenCloseDebug;
            @OpenCloseFurnace.started += instance.OnOpenCloseFurnace;
            @OpenCloseFurnace.performed += instance.OnOpenCloseFurnace;
            @OpenCloseFurnace.canceled += instance.OnOpenCloseFurnace;
            @OpenCloseResearch.started += instance.OnOpenCloseResearch;
            @OpenCloseResearch.performed += instance.OnOpenCloseResearch;
            @OpenCloseResearch.canceled += instance.OnOpenCloseResearch;
            @SelectHotbarCellByKeyboard.started += instance.OnSelectHotbarCellByKeyboard;
            @SelectHotbarCellByKeyboard.performed += instance.OnSelectHotbarCellByKeyboard;
            @SelectHotbarCellByKeyboard.canceled += instance.OnSelectHotbarCellByKeyboard;
            @SelectHotbarCellByScrolling.started += instance.OnSelectHotbarCellByScrolling;
            @SelectHotbarCellByScrolling.performed += instance.OnSelectHotbarCellByScrolling;
            @SelectHotbarCellByScrolling.canceled += instance.OnSelectHotbarCellByScrolling;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @OpenCloseInventory.started -= instance.OnOpenCloseInventory;
            @OpenCloseInventory.performed -= instance.OnOpenCloseInventory;
            @OpenCloseInventory.canceled -= instance.OnOpenCloseInventory;
            @OpenCloseCraftStation.started -= instance.OnOpenCloseCraftStation;
            @OpenCloseCraftStation.performed -= instance.OnOpenCloseCraftStation;
            @OpenCloseCraftStation.canceled -= instance.OnOpenCloseCraftStation;
            @OpenCloseDebug.started -= instance.OnOpenCloseDebug;
            @OpenCloseDebug.performed -= instance.OnOpenCloseDebug;
            @OpenCloseDebug.canceled -= instance.OnOpenCloseDebug;
            @OpenCloseFurnace.started -= instance.OnOpenCloseFurnace;
            @OpenCloseFurnace.performed -= instance.OnOpenCloseFurnace;
            @OpenCloseFurnace.canceled -= instance.OnOpenCloseFurnace;
            @OpenCloseResearch.started -= instance.OnOpenCloseResearch;
            @OpenCloseResearch.performed -= instance.OnOpenCloseResearch;
            @OpenCloseResearch.canceled -= instance.OnOpenCloseResearch;
            @SelectHotbarCellByKeyboard.started -= instance.OnSelectHotbarCellByKeyboard;
            @SelectHotbarCellByKeyboard.performed -= instance.OnSelectHotbarCellByKeyboard;
            @SelectHotbarCellByKeyboard.canceled -= instance.OnSelectHotbarCellByKeyboard;
            @SelectHotbarCellByScrolling.started -= instance.OnSelectHotbarCellByScrolling;
            @SelectHotbarCellByScrolling.performed -= instance.OnSelectHotbarCellByScrolling;
            @SelectHotbarCellByScrolling.canceled -= instance.OnSelectHotbarCellByScrolling;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Interactions
    private readonly InputActionMap m_Interactions;
    private List<IInteractionsActions> m_InteractionsActionsCallbackInterfaces = new List<IInteractionsActions>();
    private readonly InputAction m_Interactions_UseItemFromHotbar;
    private readonly InputAction m_Interactions_BreakBlock;
    private readonly InputAction m_Interactions_ThrowItem;
    public struct InteractionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public InteractionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseItemFromHotbar => m_Wrapper.m_Interactions_UseItemFromHotbar;
        public InputAction @BreakBlock => m_Wrapper.m_Interactions_BreakBlock;
        public InputAction @ThrowItem => m_Wrapper.m_Interactions_ThrowItem;
        public InputActionMap Get() { return m_Wrapper.m_Interactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionsActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionsActionsCallbackInterfaces.Add(instance);
            @UseItemFromHotbar.started += instance.OnUseItemFromHotbar;
            @UseItemFromHotbar.performed += instance.OnUseItemFromHotbar;
            @UseItemFromHotbar.canceled += instance.OnUseItemFromHotbar;
            @BreakBlock.started += instance.OnBreakBlock;
            @BreakBlock.performed += instance.OnBreakBlock;
            @BreakBlock.canceled += instance.OnBreakBlock;
            @ThrowItem.started += instance.OnThrowItem;
            @ThrowItem.performed += instance.OnThrowItem;
            @ThrowItem.canceled += instance.OnThrowItem;
        }

        private void UnregisterCallbacks(IInteractionsActions instance)
        {
            @UseItemFromHotbar.started -= instance.OnUseItemFromHotbar;
            @UseItemFromHotbar.performed -= instance.OnUseItemFromHotbar;
            @UseItemFromHotbar.canceled -= instance.OnUseItemFromHotbar;
            @BreakBlock.started -= instance.OnBreakBlock;
            @BreakBlock.performed -= instance.OnBreakBlock;
            @BreakBlock.canceled -= instance.OnBreakBlock;
            @ThrowItem.started -= instance.OnThrowItem;
            @ThrowItem.performed -= instance.OnThrowItem;
            @ThrowItem.canceled -= instance.OnThrowItem;
        }

        public void RemoveCallbacks(IInteractionsActions instance)
        {
            if (m_Wrapper.m_InteractionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionsActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionsActions @Interactions => new InteractionsActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Run;
    private readonly InputAction m_Player_Crouch;
    private readonly InputAction m_Player_Slide;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Run => m_Wrapper.m_Player_Run;
        public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
        public InputAction @Slide => m_Wrapper.m_Player_Slide;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Slide.started += instance.OnSlide;
            @Slide.performed += instance.OnSlide;
            @Slide.canceled += instance.OnSlide;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Slide.started -= instance.OnSlide;
            @Slide.performed -= instance.OnSlide;
            @Slide.canceled -= instance.OnSlide;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_Debug_ToggleDeveloperConsole;
    public struct DebugActions
    {
        private @PlayerInputActions m_Wrapper;
        public DebugActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleDeveloperConsole => m_Wrapper.m_Debug_ToggleDeveloperConsole;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @ToggleDeveloperConsole.started += instance.OnToggleDeveloperConsole;
            @ToggleDeveloperConsole.performed += instance.OnToggleDeveloperConsole;
            @ToggleDeveloperConsole.canceled += instance.OnToggleDeveloperConsole;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @ToggleDeveloperConsole.started -= instance.OnToggleDeveloperConsole;
            @ToggleDeveloperConsole.performed -= instance.OnToggleDeveloperConsole;
            @ToggleDeveloperConsole.canceled -= instance.OnToggleDeveloperConsole;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IUIActions
    {
        void OnOpenCloseInventory(InputAction.CallbackContext context);
        void OnOpenCloseCraftStation(InputAction.CallbackContext context);
        void OnOpenCloseDebug(InputAction.CallbackContext context);
        void OnOpenCloseFurnace(InputAction.CallbackContext context);
        void OnOpenCloseResearch(InputAction.CallbackContext context);
        void OnSelectHotbarCellByKeyboard(InputAction.CallbackContext context);
        void OnSelectHotbarCellByScrolling(InputAction.CallbackContext context);
    }
    public interface IInteractionsActions
    {
        void OnUseItemFromHotbar(InputAction.CallbackContext context);
        void OnBreakBlock(InputAction.CallbackContext context);
        void OnThrowItem(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSlide(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnToggleDeveloperConsole(InputAction.CallbackContext context);
    }
}
